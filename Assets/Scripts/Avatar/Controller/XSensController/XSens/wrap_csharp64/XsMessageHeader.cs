//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsMessageHeader : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsMessageHeader(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsMessageHeader obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsMessageHeader() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsMessageHeader(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public byte m_preamble {
    set {
      xsensdeviceapiPINVOKE.XsMessageHeader_m_preamble_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsMessageHeader_m_preamble_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_busId {
    set {
      xsensdeviceapiPINVOKE.XsMessageHeader_m_busId_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsMessageHeader_m_busId_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_messageId {
    set {
      xsensdeviceapiPINVOKE.XsMessageHeader_m_messageId_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsMessageHeader_m_messageId_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_length {
    set {
      xsensdeviceapiPINVOKE.XsMessageHeader_m_length_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsMessageHeader_m_length_get(swigCPtr);
      return ret;
    } 
  }

  public class LengthData : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal LengthData(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LengthData obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~LengthData() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            xsensdeviceapiPINVOKE.delete_XsMessageHeader_LengthData(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
      public class ExtendedLength : global::System.IDisposable {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;
      
        internal ExtendedLength(global::System.IntPtr cPtr, bool cMemoryOwn) {
          swigCMemOwn = cMemoryOwn;
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }
      
        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ExtendedLength obj) {
          return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }
      
        ~ExtendedLength() {
          Dispose();
        }
      
        public virtual void Dispose() {
          lock(this) {
            if (swigCPtr.Handle != global::System.IntPtr.Zero) {
              if (swigCMemOwn) {
                swigCMemOwn = false;
                xsensdeviceapiPINVOKE.delete_XsMessageHeader_LengthData_ExtendedLength(swigCPtr);
              }
              swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
            }
            global::System.GC.SuppressFinalize(this);
          }
        }
      
            public class ExtendedParts : global::System.IDisposable {
              private global::System.Runtime.InteropServices.HandleRef swigCPtr;
              protected bool swigCMemOwn;
            
              internal ExtendedParts(global::System.IntPtr cPtr, bool cMemoryOwn) {
                swigCMemOwn = cMemoryOwn;
                swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
              }
            
              internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ExtendedParts obj) {
                return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
              }
            
              ~ExtendedParts() {
                Dispose();
              }
            
              public virtual void Dispose() {
                lock(this) {
                  if (swigCPtr.Handle != global::System.IntPtr.Zero) {
                    if (swigCMemOwn) {
                      swigCMemOwn = false;
                      xsensdeviceapiPINVOKE.delete_XsMessageHeader_LengthData_ExtendedLength_ExtendedParts(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                  }
                  global::System.GC.SuppressFinalize(this);
                }
              }
            
              public byte m_high {
                set {
                  xsensdeviceapiPINVOKE.XsMessageHeader_LengthData_ExtendedLength_ExtendedParts_m_high_set(swigCPtr, value);
                } 
                get {
                  byte ret = xsensdeviceapiPINVOKE.XsMessageHeader_LengthData_ExtendedLength_ExtendedParts_m_high_get(swigCPtr);
                  return ret;
                } 
              }
            
              public byte m_low {
                set {
                  xsensdeviceapiPINVOKE.XsMessageHeader_LengthData_ExtendedLength_ExtendedParts_m_low_set(swigCPtr, value);
                } 
                get {
                  byte ret = xsensdeviceapiPINVOKE.XsMessageHeader_LengthData_ExtendedLength_ExtendedParts_m_low_get(swigCPtr);
                  return ret;
                } 
              }
            
              public ExtendedParts() : this(xsensdeviceapiPINVOKE.new_XsMessageHeader_LengthData_ExtendedLength_ExtendedParts(), true) {
              }
            
            }
      
        public XsMessageHeader.LengthData.ExtendedLength.ExtendedParts m_length {
          set {
            xsensdeviceapiPINVOKE.XsMessageHeader_LengthData_ExtendedLength_m_length_set(swigCPtr, XsMessageHeader.LengthData.ExtendedLength.ExtendedParts.getCPtr(value));
          } 
          get {
            global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsMessageHeader_LengthData_ExtendedLength_m_length_get(swigCPtr);
            XsMessageHeader.LengthData.ExtendedLength.ExtendedParts ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsMessageHeader.LengthData.ExtendedLength.ExtendedParts(cPtr, false);
            return ret;
          } 
        }
      
        public SWIGTYPE_p_unsigned_char m_data {
          set {
            xsensdeviceapiPINVOKE.XsMessageHeader_LengthData_ExtendedLength_m_data_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
          } 
          get {
            global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsMessageHeader_LengthData_ExtendedLength_m_data_get(swigCPtr);
            SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
            return ret;
          } 
        }
      
        public ExtendedLength() : this(xsensdeviceapiPINVOKE.new_XsMessageHeader_LengthData_ExtendedLength(), true) {
        }
      
      }
  
    public XsMessageHeader.LengthData.ExtendedLength m_extended {
      set {
        xsensdeviceapiPINVOKE.XsMessageHeader_LengthData_m_extended_set(swigCPtr, XsMessageHeader.LengthData.ExtendedLength.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsMessageHeader_LengthData_m_extended_get(swigCPtr);
        XsMessageHeader.LengthData.ExtendedLength ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsMessageHeader.LengthData.ExtendedLength(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_unsigned_char m_data {
      set {
        xsensdeviceapiPINVOKE.XsMessageHeader_LengthData_m_data_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsMessageHeader_LengthData_m_data_get(swigCPtr);
        SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
        return ret;
      } 
    }
  
    public LengthData() : this(xsensdeviceapiPINVOKE.new_XsMessageHeader_LengthData(), true) {
    }
  
  }

  public XsMessageHeader.LengthData m_datlen {
    set {
      xsensdeviceapiPINVOKE.XsMessageHeader_m_datlen_set(swigCPtr, XsMessageHeader.LengthData.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsMessageHeader_m_datlen_get(swigCPtr);
      XsMessageHeader.LengthData ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsMessageHeader.LengthData(cPtr, false);
      return ret;
    } 
  }

  public XsMessageHeader() : this(xsensdeviceapiPINVOKE.new_XsMessageHeader(), true) {
  }

}

}
