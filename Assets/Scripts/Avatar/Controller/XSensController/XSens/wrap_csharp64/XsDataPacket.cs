//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsDataPacket : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsDataPacket(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsDataPacket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsDataPacket() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsDataPacket(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public XsDataPacket(XsMessage msg) : this(xsensdeviceapiPINVOKE.new_XsDataPacket__SWIG_0(XsMessage.getCPtr(msg)), true) {
  }

  public XsDataPacket() : this(xsensdeviceapiPINVOKE.new_XsDataPacket__SWIG_1(), true) {
  }

  public XsDataPacket(XsDataPacket pack) : this(xsensdeviceapiPINVOKE.new_XsDataPacket__SWIG_2(XsDataPacket.getCPtr(pack)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void swap(XsDataPacket other) {
    xsensdeviceapiPINVOKE.XsDataPacket_swap(swigCPtr, XsDataPacket.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear(XsDataIdentifier id) {
    xsensdeviceapiPINVOKE.XsDataPacket_clear__SWIG_0(swigCPtr, (int)id);
  }

  public void clear() {
    xsensdeviceapiPINVOKE.XsDataPacket_clear__SWIG_1(swigCPtr);
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_empty(swigCPtr);
    return ret;
  }

  public XsDeviceId deviceId() {
    XsDeviceId ret = new XsDeviceId(xsensdeviceapiPINVOKE.XsDataPacket_deviceId(swigCPtr), true);
    return ret;
  }

  public ushort itemCount() {
    ushort ret = xsensdeviceapiPINVOKE.XsDataPacket_itemCount(swigCPtr);
    return ret;
  }

  public void setMessage(XsMessage msg) {
    xsensdeviceapiPINVOKE.XsDataPacket_setMessage(swigCPtr, XsMessage.getCPtr(msg));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsMessage toMessage() {
    XsMessage ret = new XsMessage(xsensdeviceapiPINVOKE.XsDataPacket_toMessage(swigCPtr), true);
    return ret;
  }

  public void setDeviceId(XsDeviceId id) {
    xsensdeviceapiPINVOKE.XsDataPacket_setDeviceId(swigCPtr, XsDeviceId.getCPtr(id));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsDataIdentifier dataFormat(XsDataIdentifier id) {
    XsDataIdentifier ret = (XsDataIdentifier)xsensdeviceapiPINVOKE.XsDataPacket_dataFormat(swigCPtr, (int)id);
    return ret;
  }

  public XsUShortVector rawAcceleration() {
    XsUShortVector ret = new XsUShortVector(xsensdeviceapiPINVOKE.XsDataPacket_rawAcceleration(swigCPtr), true);
    return ret;
  }

  public XsVector rawAccelerationConverted() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_rawAccelerationConverted(swigCPtr), true);
    return ret;
  }

  public bool containsRawAcceleration() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawAcceleration(swigCPtr);
    return ret;
  }

  public void setRawAcceleration(XsUShortVector vec) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawAcceleration(swigCPtr, XsUShortVector.getCPtr(vec));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsUShortVector rawGyroscopeData() {
    XsUShortVector ret = new XsUShortVector(xsensdeviceapiPINVOKE.XsDataPacket_rawGyroscopeData(swigCPtr), true);
    return ret;
  }

  public XsVector rawGyroscopeDataConverted() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_rawGyroscopeDataConverted(swigCPtr), true);
    return ret;
  }

  public bool containsRawGyroscopeData() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawGyroscopeData(swigCPtr);
    return ret;
  }

  public void setRawGyroscopeData(XsUShortVector vec) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawGyroscopeData(swigCPtr, XsUShortVector.getCPtr(vec));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsUShortVector rawGyroscopeTemperatureData() {
    XsUShortVector ret = new XsUShortVector(xsensdeviceapiPINVOKE.XsDataPacket_rawGyroscopeTemperatureData(swigCPtr), true);
    return ret;
  }

  public XsVector rawGyroscopeTemperatureDataConverted() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_rawGyroscopeTemperatureDataConverted(swigCPtr), true);
    return ret;
  }

  public bool containsRawGyroscopeTemperatureData() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawGyroscopeTemperatureData(swigCPtr);
    return ret;
  }

  public void setRawGyroscopeTemperatureData(XsUShortVector vec) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawGyroscopeTemperatureData(swigCPtr, XsUShortVector.getCPtr(vec));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsUShortVector rawMagneticField() {
    XsUShortVector ret = new XsUShortVector(xsensdeviceapiPINVOKE.XsDataPacket_rawMagneticField(swigCPtr), true);
    return ret;
  }

  public XsVector rawMagneticFieldConverted() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_rawMagneticFieldConverted(swigCPtr), true);
    return ret;
  }

  public bool containsRawMagneticField() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawMagneticField(swigCPtr);
    return ret;
  }

  public void setRawMagneticField(XsUShortVector vec) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawMagneticField(swigCPtr, XsUShortVector.getCPtr(vec));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort rawTemperature() {
    ushort ret = xsensdeviceapiPINVOKE.XsDataPacket_rawTemperature(swigCPtr);
    return ret;
  }

  public bool containsRawTemperature() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawTemperature(swigCPtr);
    return ret;
  }

  public void setRawTemperature(ushort temp) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawTemperature(swigCPtr, temp);
  }

  public XsScrData rawData() {
    XsScrData ret = new XsScrData(xsensdeviceapiPINVOKE.XsDataPacket_rawData(swigCPtr), true);
    return ret;
  }

  public bool containsRawData() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawData(swigCPtr);
    return ret;
  }

  public void setRawData(XsScrData data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawData(swigCPtr, XsScrData.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVector calibratedAcceleration() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_calibratedAcceleration(swigCPtr), true);
    return ret;
  }

  public bool containsCalibratedAcceleration() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsCalibratedAcceleration(swigCPtr);
    return ret;
  }

  public void setCalibratedAcceleration(XsVector vec) {
    xsensdeviceapiPINVOKE.XsDataPacket_setCalibratedAcceleration(swigCPtr, XsVector.getCPtr(vec));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVector calibratedGyroscopeData() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_calibratedGyroscopeData(swigCPtr), true);
    return ret;
  }

  public bool containsCalibratedGyroscopeData() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsCalibratedGyroscopeData(swigCPtr);
    return ret;
  }

  public void setCalibratedGyroscopeData(XsVector vec) {
    xsensdeviceapiPINVOKE.XsDataPacket_setCalibratedGyroscopeData(swigCPtr, XsVector.getCPtr(vec));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVector calibratedMagneticField() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_calibratedMagneticField(swigCPtr), true);
    return ret;
  }

  public bool containsCalibratedMagneticField() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsCalibratedMagneticField(swigCPtr);
    return ret;
  }

  public void setCalibratedMagneticField(XsVector vec) {
    xsensdeviceapiPINVOKE.XsDataPacket_setCalibratedMagneticField(swigCPtr, XsVector.getCPtr(vec));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsCalibratedData calibratedData() {
    XsCalibratedData ret = new XsCalibratedData(xsensdeviceapiPINVOKE.XsDataPacket_calibratedData(swigCPtr), true);
    return ret;
  }

  public bool containsCalibratedData() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsCalibratedData(swigCPtr);
    return ret;
  }

  public void setCalibratedData(XsCalibratedData data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setCalibratedData(swigCPtr, XsCalibratedData.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsQuaternion orientationQuaternion(XsDataIdentifier coordinateSystem) {
    XsQuaternion ret = new XsQuaternion(xsensdeviceapiPINVOKE.XsDataPacket_orientationQuaternion__SWIG_0(swigCPtr, (int)coordinateSystem), true);
    return ret;
  }

  public XsQuaternion orientationQuaternion() {
    XsQuaternion ret = new XsQuaternion(xsensdeviceapiPINVOKE.XsDataPacket_orientationQuaternion__SWIG_1(swigCPtr), true);
    return ret;
  }

  public void setOrientationQuaternion(XsQuaternion data, XsDataIdentifier coordinateSystem) {
    xsensdeviceapiPINVOKE.XsDataPacket_setOrientationQuaternion(swigCPtr, XsQuaternion.getCPtr(data), (int)coordinateSystem);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsEuler orientationEuler(XsDataIdentifier coordinateSystem) {
    XsEuler ret = new XsEuler(xsensdeviceapiPINVOKE.XsDataPacket_orientationEuler__SWIG_0(swigCPtr, (int)coordinateSystem), true);
    return ret;
  }

  public XsEuler orientationEuler() {
    XsEuler ret = new XsEuler(xsensdeviceapiPINVOKE.XsDataPacket_orientationEuler__SWIG_1(swigCPtr), true);
    return ret;
  }

  public void setOrientationEuler(XsEuler data, XsDataIdentifier coordinateSystem) {
    xsensdeviceapiPINVOKE.XsDataPacket_setOrientationEuler(swigCPtr, XsEuler.getCPtr(data), (int)coordinateSystem);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsMatrix orientationMatrix(XsDataIdentifier coordinateSystem) {
    XsMatrix ret = new XsMatrix(xsensdeviceapiPINVOKE.XsDataPacket_orientationMatrix__SWIG_0(swigCPtr, (int)coordinateSystem), true);
    return ret;
  }

  public XsMatrix orientationMatrix() {
    XsMatrix ret = new XsMatrix(xsensdeviceapiPINVOKE.XsDataPacket_orientationMatrix__SWIG_1(swigCPtr), true);
    return ret;
  }

  public void setOrientationMatrix(XsMatrix data, XsDataIdentifier coordinateSystem) {
    xsensdeviceapiPINVOKE.XsDataPacket_setOrientationMatrix(swigCPtr, XsMatrix.getCPtr(data), (int)coordinateSystem);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool containsOrientation() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsOrientation(swigCPtr);
    return ret;
  }

  public XsDataIdentifier orientationIdentifier() {
    XsDataIdentifier ret = (XsDataIdentifier)xsensdeviceapiPINVOKE.XsDataPacket_orientationIdentifier(swigCPtr);
    return ret;
  }

  public XsDataIdentifier coordinateSystemOrientation() {
    XsDataIdentifier ret = (XsDataIdentifier)xsensdeviceapiPINVOKE.XsDataPacket_coordinateSystemOrientation(swigCPtr);
    return ret;
  }

  public XsSdiData sdiData() {
    XsSdiData ret = new XsSdiData(xsensdeviceapiPINVOKE.XsDataPacket_sdiData(swigCPtr), true);
    return ret;
  }

  public bool containsSdiData() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsSdiData(swigCPtr);
    return ret;
  }

  public void setSdiData(XsSdiData data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setSdiData(swigCPtr, XsSdiData.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsDeviceId storedDeviceId() {
    XsDeviceId ret = new XsDeviceId(xsensdeviceapiPINVOKE.XsDataPacket_storedDeviceId(swigCPtr), true);
    return ret;
  }

  public bool containsStoredDeviceId() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsStoredDeviceId(swigCPtr);
    return ret;
  }

  public void setStoredDeviceId(XsDeviceId data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setStoredDeviceId(swigCPtr, XsDeviceId.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint status() {
    uint ret = xsensdeviceapiPINVOKE.XsDataPacket_status(swigCPtr);
    return ret;
  }

  public bool containsStatus() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsStatus(swigCPtr);
    return ret;
  }

  public bool containsDetailedStatus() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsDetailedStatus(swigCPtr);
    return ret;
  }

  public void setStatus(uint data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setStatus(swigCPtr, data);
  }

  public void setStatusByte(byte data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setStatusByte(swigCPtr, data);
  }

  public byte packetCounter8() {
    byte ret = xsensdeviceapiPINVOKE.XsDataPacket_packetCounter8(swigCPtr);
    return ret;
  }

  public bool containsPacketCounter8() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsPacketCounter8(swigCPtr);
    return ret;
  }

  public void setPacketCounter8(byte counter) {
    xsensdeviceapiPINVOKE.XsDataPacket_setPacketCounter8(swigCPtr, counter);
  }

  public ushort packetCounter() {
    ushort ret = xsensdeviceapiPINVOKE.XsDataPacket_packetCounter(swigCPtr);
    return ret;
  }

  public bool containsPacketCounter() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsPacketCounter(swigCPtr);
    return ret;
  }

  public void setPacketCounter(ushort counter) {
    xsensdeviceapiPINVOKE.XsDataPacket_setPacketCounter(swigCPtr, counter);
  }

  public uint sampleTimeFine() {
    uint ret = xsensdeviceapiPINVOKE.XsDataPacket_sampleTimeFine(swigCPtr);
    return ret;
  }

  public bool containsSampleTimeFine() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsSampleTimeFine(swigCPtr);
    return ret;
  }

  public void setSampleTimeFine(uint counter) {
    xsensdeviceapiPINVOKE.XsDataPacket_setSampleTimeFine(swigCPtr, counter);
  }

  public uint sampleTimeCoarse() {
    uint ret = xsensdeviceapiPINVOKE.XsDataPacket_sampleTimeCoarse(swigCPtr);
    return ret;
  }

  public bool containsSampleTimeCoarse() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsSampleTimeCoarse(swigCPtr);
    return ret;
  }

  public void setSampleTimeCoarse(uint counter) {
    xsensdeviceapiPINVOKE.XsDataPacket_setSampleTimeCoarse(swigCPtr, counter);
  }

  public ulong sampleTime64() {
    ulong ret = xsensdeviceapiPINVOKE.XsDataPacket_sampleTime64(swigCPtr);
    return ret;
  }

  public bool containsSampleTime64() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsSampleTime64(swigCPtr);
    return ret;
  }

  public void setSampleTime64(ulong counter) {
    xsensdeviceapiPINVOKE.XsDataPacket_setSampleTime64(swigCPtr, counter);
  }

  public XsVector freeAcceleration() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_freeAcceleration(swigCPtr), true);
    return ret;
  }

  public bool containsFreeAcceleration() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsFreeAcceleration(swigCPtr);
    return ret;
  }

  public void setFreeAcceleration(XsVector g) {
    xsensdeviceapiPINVOKE.XsDataPacket_setFreeAcceleration(swigCPtr, XsVector.getCPtr(g));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public double temperature() {
    double ret = xsensdeviceapiPINVOKE.XsDataPacket_temperature(swigCPtr);
    return ret;
  }

  public bool containsTemperature() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsTemperature(swigCPtr);
    return ret;
  }

  public void setTemperature(double temperature) {
    xsensdeviceapiPINVOKE.XsDataPacket_setTemperature(swigCPtr, temperature);
  }

  public XsGpsPvtData gpsPvtData() {
    XsGpsPvtData ret = new XsGpsPvtData(xsensdeviceapiPINVOKE.XsDataPacket_gpsPvtData(swigCPtr), true);
    return ret;
  }

  public bool containsGpsPvtData() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsGpsPvtData(swigCPtr);
    return ret;
  }

  public void setGpsPvtData(XsGpsPvtData data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setGpsPvtData(swigCPtr, XsGpsPvtData.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsPressure pressure() {
    XsPressure ret = new XsPressure(xsensdeviceapiPINVOKE.XsDataPacket_pressure(swigCPtr), true);
    return ret;
  }

  public bool containsPressure() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsPressure(swigCPtr);
    return ret;
  }

  public bool containsPressureAge() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsPressureAge(swigCPtr);
    return ret;
  }

  public void setPressure(XsPressure data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setPressure(swigCPtr, XsPressure.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsAnalogInData analogIn1Data() {
    XsAnalogInData ret = new XsAnalogInData(xsensdeviceapiPINVOKE.XsDataPacket_analogIn1Data(swigCPtr), true);
    return ret;
  }

  public bool containsAnalogIn1Data() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsAnalogIn1Data(swigCPtr);
    return ret;
  }

  public void setAnalogIn1Data(XsAnalogInData data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setAnalogIn1Data(swigCPtr, XsAnalogInData.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsAnalogInData analogIn2Data() {
    XsAnalogInData ret = new XsAnalogInData(xsensdeviceapiPINVOKE.XsDataPacket_analogIn2Data(swigCPtr), true);
    return ret;
  }

  public bool containsAnalogIn2Data() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsAnalogIn2Data(swigCPtr);
    return ret;
  }

  public void setAnalogIn2Data(XsAnalogInData data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setAnalogIn2Data(swigCPtr, XsAnalogInData.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVector positionLLA() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_positionLLA(swigCPtr), true);
    return ret;
  }

  public bool containsPositionLLA() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsPositionLLA(swigCPtr);
    return ret;
  }

  public void setPositionLLA(XsVector data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setPositionLLA(swigCPtr, XsVector.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVector latitudeLongitude() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_latitudeLongitude(swigCPtr), true);
    return ret;
  }

  public bool containsLatitudeLongitude() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsLatitudeLongitude(swigCPtr);
    return ret;
  }

  public void setLatitudeLongitude(XsVector data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setLatitudeLongitude(swigCPtr, XsVector.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public double altitude() {
    double ret = xsensdeviceapiPINVOKE.XsDataPacket_altitude(swigCPtr);
    return ret;
  }

  public bool containsAltitude() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsAltitude(swigCPtr);
    return ret;
  }

  public void setAltitude(double data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setAltitude(swigCPtr, data);
  }

  public double altitudeMsl() {
    double ret = xsensdeviceapiPINVOKE.XsDataPacket_altitudeMsl(swigCPtr);
    return ret;
  }

  public bool containsAltitudeMsl() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsAltitudeMsl(swigCPtr);
    return ret;
  }

  public void setAltitudeMsl(double data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setAltitudeMsl(swigCPtr, data);
  }

  public XsVector velocity(XsDataIdentifier coordinateSystem) {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_velocity__SWIG_0(swigCPtr, (int)coordinateSystem), true);
    return ret;
  }

  public XsVector velocity() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_velocity__SWIG_1(swigCPtr), true);
    return ret;
  }

  public bool containsVelocity() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsVelocity(swigCPtr);
    return ret;
  }

  public void setVelocity(XsVector data, XsDataIdentifier coordinateSystem) {
    xsensdeviceapiPINVOKE.XsDataPacket_setVelocity(swigCPtr, XsVector.getCPtr(data), (int)coordinateSystem);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsDataIdentifier velocityIdentifier() {
    XsDataIdentifier ret = (XsDataIdentifier)xsensdeviceapiPINVOKE.XsDataPacket_velocityIdentifier(swigCPtr);
    return ret;
  }

  public XsDataIdentifier coordinateSystemVelocity() {
    XsDataIdentifier ret = (XsDataIdentifier)xsensdeviceapiPINVOKE.XsDataPacket_coordinateSystemVelocity(swigCPtr);
    return ret;
  }

  public XsUtcTime utcTime() {
    XsUtcTime ret = new XsUtcTime(xsensdeviceapiPINVOKE.XsDataPacket_utcTime(swigCPtr), true);
    return ret;
  }

  public bool containsUtcTime() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsUtcTime(swigCPtr);
    return ret;
  }

  public void setUtcTime(XsUtcTime data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setUtcTime(swigCPtr, XsUtcTime.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsRange frameRange() {
    XsRange ret = new XsRange(xsensdeviceapiPINVOKE.XsDataPacket_frameRange(swigCPtr), true);
    return ret;
  }

  public bool containsFrameRange() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsFrameRange(swigCPtr);
    return ret;
  }

  public void setFrameRange(XsRange r) {
    xsensdeviceapiPINVOKE.XsDataPacket_setFrameRange(swigCPtr, XsRange.getCPtr(r));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public int rssi() {
    int ret = xsensdeviceapiPINVOKE.XsDataPacket_rssi(swigCPtr);
    return ret;
  }

  public bool containsRssi() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRssi(swigCPtr);
    return ret;
  }

  public void setRssi(int r) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRssi(swigCPtr, r);
  }

  public XsRawGpsDop rawGpsDop() {
    XsRawGpsDop ret = new XsRawGpsDop(xsensdeviceapiPINVOKE.XsDataPacket_rawGpsDop(swigCPtr), true);
    return ret;
  }

  public bool containsRawGpsDop() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawGpsDop(swigCPtr);
    return ret;
  }

  public void setRawGpsDop(XsRawGpsDop data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawGpsDop(swigCPtr, XsRawGpsDop.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsRawGpsSol rawGpsSol() {
    XsRawGpsSol ret = new XsRawGpsSol(xsensdeviceapiPINVOKE.XsDataPacket_rawGpsSol(swigCPtr), true);
    return ret;
  }

  public bool containsRawGpsSol() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawGpsSol(swigCPtr);
    return ret;
  }

  public void setRawGpsSol(XsRawGpsSol data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawGpsSol(swigCPtr, XsRawGpsSol.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsRawGpsTimeUtc rawGpsTimeUtc() {
    XsRawGpsTimeUtc ret = new XsRawGpsTimeUtc(xsensdeviceapiPINVOKE.XsDataPacket_rawGpsTimeUtc(swigCPtr), true);
    return ret;
  }

  public bool containsRawGpsTimeUtc() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawGpsTimeUtc(swigCPtr);
    return ret;
  }

  public void setRawGpsTimeUtc(XsRawGpsTimeUtc data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawGpsTimeUtc(swigCPtr, XsRawGpsTimeUtc.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsRawGpsSvInfo rawGpsSvInfo() {
    XsRawGpsSvInfo ret = new XsRawGpsSvInfo(xsensdeviceapiPINVOKE.XsDataPacket_rawGpsSvInfo(swigCPtr), true);
    return ret;
  }

  public bool containsRawGpsSvInfo() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawGpsSvInfo(swigCPtr);
    return ret;
  }

  public void setRawGpsSvInfo(XsRawGpsSvInfo raw) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawGpsSvInfo(swigCPtr, XsRawGpsSvInfo.getCPtr(raw));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsRawGnssPvtData rawGnssPvtData() {
    XsRawGnssPvtData ret = new XsRawGnssPvtData(xsensdeviceapiPINVOKE.XsDataPacket_rawGnssPvtData(swigCPtr), true);
    return ret;
  }

  public bool containsRawGnssPvtData() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawGnssPvtData(swigCPtr);
    return ret;
  }

  public void setRawGnssPvtData(XsRawGnssPvtData raw) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawGnssPvtData(swigCPtr, XsRawGnssPvtData.getCPtr(raw));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte gnssAge() {
    byte ret = xsensdeviceapiPINVOKE.XsDataPacket_gnssAge(swigCPtr);
    return ret;
  }

  public bool containsGnssAge() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsGnssAge(swigCPtr);
    return ret;
  }

  public void setGnssAge(byte age) {
    xsensdeviceapiPINVOKE.XsDataPacket_setGnssAge(swigCPtr, age);
  }

  public XsRawGnssSatInfo rawGnssSatInfo() {
    XsRawGnssSatInfo ret = new XsRawGnssSatInfo(xsensdeviceapiPINVOKE.XsDataPacket_rawGnssSatInfo(swigCPtr), true);
    return ret;
  }

  public bool containsRawGnssSatInfo() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawGnssSatInfo(swigCPtr);
    return ret;
  }

  public void setRawGnssSatInfo(XsRawGnssSatInfo data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawGnssSatInfo(swigCPtr, XsRawGnssSatInfo.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsSnapshot fullSnapshot() {
    XsSnapshot ret = new XsSnapshot(xsensdeviceapiPINVOKE.XsDataPacket_fullSnapshot(swigCPtr), true);
    return ret;
  }

  public bool containsFullSnapshot() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsFullSnapshot(swigCPtr);
    return ret;
  }

  public void setFullSnapshot(XsSnapshot data, bool retransmission) {
    xsensdeviceapiPINVOKE.XsDataPacket_setFullSnapshot(swigCPtr, XsSnapshot.getCPtr(data), retransmission);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsSnapshot awindaSnapshot() {
    XsSnapshot ret = new XsSnapshot(xsensdeviceapiPINVOKE.XsDataPacket_awindaSnapshot(swigCPtr), true);
    return ret;
  }

  public bool containsAwindaSnapshot() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsAwindaSnapshot(swigCPtr);
    return ret;
  }

  public void setAwindaSnapshot(XsSnapshot raw, bool retransmission) {
    xsensdeviceapiPINVOKE.XsDataPacket_setAwindaSnapshot(swigCPtr, XsSnapshot.getCPtr(raw), retransmission);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isAwindaSnapshotARetransmission() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_isAwindaSnapshotARetransmission(swigCPtr);
    return ret;
  }

  public XsDataPacket merge(XsDataPacket other, bool overwrite) {
    XsDataPacket ret = new XsDataPacket(xsensdeviceapiPINVOKE.XsDataPacket_merge__SWIG_0(swigCPtr, XsDataPacket.getCPtr(other), overwrite), false);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsDataPacket merge(XsDataPacket other) {
    XsDataPacket ret = new XsDataPacket(xsensdeviceapiPINVOKE.XsDataPacket_merge__SWIG_1(swigCPtr, XsDataPacket.getCPtr(other)), false);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTimeOfArrival(XsTimeStamp t) {
    xsensdeviceapiPINVOKE.XsDataPacket_setTimeOfArrival(swigCPtr, XsTimeStamp.getCPtr(t));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsTimeStamp timeOfArrival() {
    XsTimeStamp ret = new XsTimeStamp(xsensdeviceapiPINVOKE.XsDataPacket_timeOfArrival(swigCPtr), true);
    return ret;
  }

  public void setPacketId(long t) {
    xsensdeviceapiPINVOKE.XsDataPacket_setPacketId(swigCPtr, t);
  }

  public long packetId() {
    long ret = xsensdeviceapiPINVOKE.XsDataPacket_packetId(swigCPtr);
    return ret;
  }

  public void setTriggerIndication(XsDataIdentifier triggerId, XsTriggerIndicationData triggerIndicationData) {
    xsensdeviceapiPINVOKE.XsDataPacket_setTriggerIndication(swigCPtr, (int)triggerId, XsTriggerIndicationData.getCPtr(triggerIndicationData));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool containsTriggerIndication(XsDataIdentifier triggerId) {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsTriggerIndication(swigCPtr, (int)triggerId);
    return ret;
  }

  public XsTriggerIndicationData triggerIndication(XsDataIdentifier triggerId) {
    XsTriggerIndicationData ret = new XsTriggerIndicationData(xsensdeviceapiPINVOKE.XsDataPacket_triggerIndication(swigCPtr, (int)triggerId), true);
    return ret;
  }

  public XsByteArray rawBlob() {
    XsByteArray ret = new XsByteArray(xsensdeviceapiPINVOKE.XsDataPacket_rawBlob(swigCPtr), true);
    return ret;
  }

  public bool containsRawBlob() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRawBlob(swigCPtr);
    return ret;
  }

  public void setRawBlob(XsByteArray data) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRawBlob(swigCPtr, XsByteArray.getCPtr(data));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVector accelerationHR() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_accelerationHR(swigCPtr), true);
    return ret;
  }

  public bool containsAccelerationHR() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsAccelerationHR(swigCPtr);
    return ret;
  }

  public void setAccelerationHR(XsVector vec) {
    xsensdeviceapiPINVOKE.XsDataPacket_setAccelerationHR(swigCPtr, XsVector.getCPtr(vec));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVector rateOfTurnHR() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDataPacket_rateOfTurnHR(swigCPtr), true);
    return ret;
  }

  public bool containsRateOfTurnHR() {
    bool ret = xsensdeviceapiPINVOKE.XsDataPacket_containsRateOfTurnHR(swigCPtr);
    return ret;
  }

  public void setRateOfTurnHR(XsVector vec) {
    xsensdeviceapiPINVOKE.XsDataPacket_setRateOfTurnHR(swigCPtr, XsVector.getCPtr(vec));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_DataPacketPrivate d {
    set {
      xsensdeviceapiPINVOKE.XsDataPacket_d_set(swigCPtr, SWIGTYPE_p_DataPacketPrivate.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDataPacket_d_get(swigCPtr);
      SWIGTYPE_p_DataPacketPrivate ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_DataPacketPrivate(cPtr, false);
      return ret;
    } 
  }

  public XsDeviceId m_deviceId {
    set {
      xsensdeviceapiPINVOKE.XsDataPacket_m_deviceId_set(swigCPtr, XsDeviceId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDataPacket_m_deviceId_get(swigCPtr);
      XsDeviceId ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsDeviceId(cPtr, false);
      return ret;
    } 
  }

  public XsTimeStamp m_toa {
    set {
      xsensdeviceapiPINVOKE.XsDataPacket_m_toa_set(swigCPtr, XsTimeStamp.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDataPacket_m_toa_get(swigCPtr);
      XsTimeStamp ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsTimeStamp(cPtr, false);
      return ret;
    } 
  }

  public long m_packetId {
    set {
      xsensdeviceapiPINVOKE.XsDataPacket_m_packetId_set(swigCPtr, value);
    } 
    get {
      long ret = xsensdeviceapiPINVOKE.XsDataPacket_m_packetId_get(swigCPtr);
      return ret;
    } 
  }

}

}
