//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsStringArrayImpl : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsStringArrayImpl(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsStringArrayImpl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsStringArrayImpl() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsStringArrayImpl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public XsStringArrayImpl(uint count, XsString src) : this(xsensdeviceapiPINVOKE.new_XsStringArrayImpl__SWIG_0(count, XsString.getCPtr(src)), true) {
  }

  public XsStringArrayImpl(uint count) : this(xsensdeviceapiPINVOKE.new_XsStringArrayImpl__SWIG_1(count), true) {
  }

  public XsStringArrayImpl() : this(xsensdeviceapiPINVOKE.new_XsStringArrayImpl__SWIG_2(), true) {
  }

  public XsStringArrayImpl(XsStringArrayImpl other) : this(xsensdeviceapiPINVOKE.new_XsStringArrayImpl__SWIG_3(XsStringArrayImpl.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsStringArrayImpl(XsString arg0, uint sz, XsDataFlags flags) : this(xsensdeviceapiPINVOKE.new_XsStringArrayImpl__SWIG_4(XsString.getCPtr(arg0), sz, (int)flags), true) {
  }

  public XsStringArrayImpl(XsString arg0, uint sz) : this(xsensdeviceapiPINVOKE.new_XsStringArrayImpl__SWIG_5(XsString.getCPtr(arg0), sz), true) {
  }

  public void clear() {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_clear(swigCPtr);
  }

  public void reserve(uint count) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_reserve(swigCPtr, count);
  }

  public uint reserved() {
    uint ret = xsensdeviceapiPINVOKE.XsStringArrayImpl_reserved(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_XsArrayDescriptor descriptor() {
    SWIGTYPE_p_XsArrayDescriptor ret = new SWIGTYPE_p_XsArrayDescriptor(xsensdeviceapiPINVOKE.XsStringArrayImpl_descriptor(swigCPtr), false);
    return ret;
  }

  public XsString value(uint index) {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsStringArrayImpl_value(swigCPtr, index), true);
    return ret;
  }

  public XsString first() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsStringArrayImpl_first(swigCPtr), true);
    return ret;
  }

  public XsString last() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsStringArrayImpl_last(swigCPtr), true);
    return ret;
  }

  public XsString at(uint index) {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsStringArrayImpl_at__SWIG_0(swigCPtr, index), false);
    return ret;
  }

  public void insert(XsString item, uint index) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_insert__SWIG_0(swigCPtr, XsString.getCPtr(item), index);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void insert(XsString items, uint index, uint count) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_insert__SWIG_1(swigCPtr, XsString.getCPtr(items), index, count);
  }

  public void push_back(XsString item) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_push_back(swigCPtr, XsString.getCPtr(item));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void pop_back(uint count) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_pop_back__SWIG_0(swigCPtr, count);
  }

  public void pop_back() {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_pop_back__SWIG_1(swigCPtr);
  }

  public void push_front(XsString item) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_push_front(swigCPtr, XsString.getCPtr(item));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void pop_front(uint count) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_pop_front__SWIG_0(swigCPtr, count);
  }

  public void pop_front() {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_pop_front__SWIG_1(swigCPtr);
  }

  public uint size() {
    uint ret = xsensdeviceapiPINVOKE.XsStringArrayImpl_size(swigCPtr);
    return ret;
  }

  public void erase(uint index, uint count) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_erase__SWIG_0(swigCPtr, index, count);
  }

  public void erase(uint index) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_erase__SWIG_1(swigCPtr, index);
  }

  public void assign(uint count, XsString src) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_assign(swigCPtr, count, XsString.getCPtr(src));
  }

  public void resize(uint count) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_resize(swigCPtr, count);
  }

  public void setSize(uint count) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_setSize(swigCPtr, count);
  }

  public void append(XsStringArrayImpl other) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_append(swigCPtr, XsStringArrayImpl.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsStringArrayImpl_empty(swigCPtr);
    return ret;
  }

  public void swap(XsStringArrayImpl other) {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_swap(swigCPtr, XsStringArrayImpl.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public int find(XsString needle) {
    int ret = xsensdeviceapiPINVOKE.XsStringArrayImpl_find(swigCPtr, XsString.getCPtr(needle));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeDuplicates() {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_removeDuplicates(swigCPtr);
  }

  public void sort() {
    xsensdeviceapiPINVOKE.XsStringArrayImpl_sort(swigCPtr);
  }

}

}
