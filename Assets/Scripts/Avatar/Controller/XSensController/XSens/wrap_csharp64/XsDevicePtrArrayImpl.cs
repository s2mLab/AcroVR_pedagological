//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsDevicePtrArrayImpl : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsDevicePtrArrayImpl(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsDevicePtrArrayImpl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsDevicePtrArrayImpl() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsDevicePtrArrayImpl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public XsDevicePtrArrayImpl(uint count, SWIGTYPE_p_p_XsDevice src) : this(xsensdeviceapiPINVOKE.new_XsDevicePtrArrayImpl__SWIG_0(count, SWIGTYPE_p_p_XsDevice.getCPtr(src)), true) {
  }

  public XsDevicePtrArrayImpl(uint count) : this(xsensdeviceapiPINVOKE.new_XsDevicePtrArrayImpl__SWIG_1(count), true) {
  }

  public XsDevicePtrArrayImpl() : this(xsensdeviceapiPINVOKE.new_XsDevicePtrArrayImpl__SWIG_2(), true) {
  }

  public XsDevicePtrArrayImpl(SWIGTYPE_p_XsArrayImplT_XsDevicePtr_g_xsDevicePtrArrayDescriptor_XsDevicePtrArray_t__ArrayImpl other) : this(xsensdeviceapiPINVOKE.new_XsDevicePtrArrayImpl__SWIG_3(SWIGTYPE_p_XsArrayImplT_XsDevicePtr_g_xsDevicePtrArrayDescriptor_XsDevicePtrArray_t__ArrayImpl.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsDevicePtrArrayImpl(SWIGTYPE_p_p_XsDevice arg0, uint sz, XsDataFlags flags) : this(xsensdeviceapiPINVOKE.new_XsDevicePtrArrayImpl__SWIG_4(SWIGTYPE_p_p_XsDevice.getCPtr(arg0), sz, (int)flags), true) {
  }

  public XsDevicePtrArrayImpl(SWIGTYPE_p_p_XsDevice arg0, uint sz) : this(xsensdeviceapiPINVOKE.new_XsDevicePtrArrayImpl__SWIG_5(SWIGTYPE_p_p_XsDevice.getCPtr(arg0), sz), true) {
  }

  public void clear() {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_clear(swigCPtr);
  }

  public void reserve(uint count) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_reserve(swigCPtr, count);
  }

  public uint reserved() {
    uint ret = xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_reserved(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_XsArrayDescriptor descriptor() {
    SWIGTYPE_p_XsArrayDescriptor ret = new SWIGTYPE_p_XsArrayDescriptor(xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_descriptor(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_XsDevice value(uint index) {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_value(swigCPtr, index);
    SWIGTYPE_p_XsDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_XsDevice first() {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_first(swigCPtr);
    SWIGTYPE_p_XsDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_XsDevice last() {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_last(swigCPtr);
    SWIGTYPE_p_XsDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_XsDevice at(uint index) {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_at__SWIG_0(swigCPtr, index);
    SWIGTYPE_p_XsDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(cPtr, false);
    return ret;
  }

  public void insert(SWIGTYPE_p_XsDevice item, uint index) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_insert__SWIG_0(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(item), index);
  }

  public void insert(SWIGTYPE_p_p_XsDevice items, uint index, uint count) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_insert__SWIG_1(swigCPtr, SWIGTYPE_p_p_XsDevice.getCPtr(items), index, count);
  }

  public void push_back(SWIGTYPE_p_XsDevice item) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_push_back(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(item));
  }

  public void pop_back(uint count) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_pop_back__SWIG_0(swigCPtr, count);
  }

  public void pop_back() {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_pop_back__SWIG_1(swigCPtr);
  }

  public void push_front(SWIGTYPE_p_XsDevice item) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_push_front(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(item));
  }

  public void pop_front(uint count) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_pop_front__SWIG_0(swigCPtr, count);
  }

  public void pop_front() {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_pop_front__SWIG_1(swigCPtr);
  }

  public uint size() {
    uint ret = xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_size(swigCPtr);
    return ret;
  }

  public void erase(uint index, uint count) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_erase__SWIG_0(swigCPtr, index, count);
  }

  public void erase(uint index) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_erase__SWIG_1(swigCPtr, index);
  }

  public void assign(uint count, SWIGTYPE_p_p_XsDevice src) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_assign(swigCPtr, count, SWIGTYPE_p_p_XsDevice.getCPtr(src));
  }

  public void resize(uint count) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_resize(swigCPtr, count);
  }

  public void setSize(uint count) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_setSize(swigCPtr, count);
  }

  public void append(SWIGTYPE_p_XsArrayImplT_XsDevicePtr_g_xsDevicePtrArrayDescriptor_XsDevicePtrArray_t__ArrayImpl other) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_append(swigCPtr, SWIGTYPE_p_XsArrayImplT_XsDevicePtr_g_xsDevicePtrArrayDescriptor_XsDevicePtrArray_t__ArrayImpl.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_empty(swigCPtr);
    return ret;
  }

  public void swap(SWIGTYPE_p_XsArrayImplT_XsDevicePtr_g_xsDevicePtrArrayDescriptor_XsDevicePtrArray_t__ArrayImpl other) {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_swap(swigCPtr, SWIGTYPE_p_XsArrayImplT_XsDevicePtr_g_xsDevicePtrArrayDescriptor_XsDevicePtrArray_t__ArrayImpl.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public int find(SWIGTYPE_p_XsDevice needle) {
    int ret = xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_find(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(needle));
    return ret;
  }

  public void removeDuplicates() {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_removeDuplicates(swigCPtr);
  }

  public void sort() {
    xsensdeviceapiPINVOKE.XsDevicePtrArrayImpl_sort(swigCPtr);
  }

}

}
