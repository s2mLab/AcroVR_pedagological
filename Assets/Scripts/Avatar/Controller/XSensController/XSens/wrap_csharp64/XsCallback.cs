//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsCallback : XsCallbackPlainC {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal XsCallback(global::System.IntPtr cPtr, bool cMemoryOwn) : base(xsensdeviceapiPINVOKE.XsCallback_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsCallback() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public XsCallback() : this(xsensdeviceapiPINVOKE.new_XsCallback(), true) {
    SwigDirectorConnect();
  }

  protected virtual void onDeviceStateChanged(SWIGTYPE_p_XsDevice dev, XsDeviceState newState, XsDeviceState oldState) {
    if (SwigDerivedClassHasMethod("onDeviceStateChanged", swigMethodTypes0)) xsensdeviceapiPINVOKE.XsCallback_onDeviceStateChangedSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)newState, (int)oldState); else xsensdeviceapiPINVOKE.XsCallback_onDeviceStateChanged(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)newState, (int)oldState);
  }

  protected virtual void onLiveDataAvailable(SWIGTYPE_p_XsDevice dev, XsDataPacket packet) {
    if (SwigDerivedClassHasMethod("onLiveDataAvailable", swigMethodTypes1)) xsensdeviceapiPINVOKE.XsCallback_onLiveDataAvailableSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsDataPacket.getCPtr(packet)); else xsensdeviceapiPINVOKE.XsCallback_onLiveDataAvailable(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsDataPacket.getCPtr(packet));
  }

  protected virtual void onMissedPackets(SWIGTYPE_p_XsDevice dev, int count, int first, int last) {
    if (SwigDerivedClassHasMethod("onMissedPackets", swigMethodTypes2)) xsensdeviceapiPINVOKE.XsCallback_onMissedPacketsSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), count, first, last); else xsensdeviceapiPINVOKE.XsCallback_onMissedPackets(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), count, first, last);
  }

  protected virtual void onWakeupReceived(SWIGTYPE_p_XsDevice dev) {
    if (SwigDerivedClassHasMethod("onWakeupReceived", swigMethodTypes3)) xsensdeviceapiPINVOKE.XsCallback_onWakeupReceivedSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev)); else xsensdeviceapiPINVOKE.XsCallback_onWakeupReceived(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev));
  }

  protected virtual void onProgressUpdated(SWIGTYPE_p_XsDevice dev, int current, int total, XsString identifier) {
    if (SwigDerivedClassHasMethod("onProgressUpdated", swigMethodTypes4)) xsensdeviceapiPINVOKE.XsCallback_onProgressUpdatedSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), current, total, XsString.getCPtr(identifier)); else xsensdeviceapiPINVOKE.XsCallback_onProgressUpdated(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), current, total, XsString.getCPtr(identifier));
  }

  protected virtual int onWriteMessageToLogFile(SWIGTYPE_p_XsDevice dev, XsMessage message) {
    int ret = (SwigDerivedClassHasMethod("onWriteMessageToLogFile", swigMethodTypes5) ? xsensdeviceapiPINVOKE.XsCallback_onWriteMessageToLogFileSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message)) : xsensdeviceapiPINVOKE.XsCallback_onWriteMessageToLogFile(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message)));
    return ret;
  }

  protected virtual void onRecordingDataAvailable(SWIGTYPE_p_XsDevice dev, XsDataPacket data) {
    if (SwigDerivedClassHasMethod("onRecordingDataAvailable", swigMethodTypes6)) xsensdeviceapiPINVOKE.XsCallback_onRecordingDataAvailableSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsDataPacket.getCPtr(data)); else xsensdeviceapiPINVOKE.XsCallback_onRecordingDataAvailable(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsDataPacket.getCPtr(data));
  }

  protected virtual void onConnectivityChanged(SWIGTYPE_p_XsDevice dev, XsConnectivityState newState) {
    if (SwigDerivedClassHasMethod("onConnectivityChanged", swigMethodTypes7)) xsensdeviceapiPINVOKE.XsCallback_onConnectivityChangedSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)newState); else xsensdeviceapiPINVOKE.XsCallback_onConnectivityChanged(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)newState);
  }

  protected virtual void onInfoResponse(SWIGTYPE_p_XsDevice dev, XsInfoRequest request) {
    if (SwigDerivedClassHasMethod("onInfoResponse", swigMethodTypes8)) xsensdeviceapiPINVOKE.XsCallback_onInfoResponseSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)request); else xsensdeviceapiPINVOKE.XsCallback_onInfoResponse(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)request);
  }

  protected virtual void onError(SWIGTYPE_p_XsDevice dev, XsResultValue error) {
    if (SwigDerivedClassHasMethod("onError", swigMethodTypes9)) xsensdeviceapiPINVOKE.XsCallback_onErrorSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)error); else xsensdeviceapiPINVOKE.XsCallback_onError(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)error);
  }

  protected virtual void onNonDataMessage(SWIGTYPE_p_XsDevice dev, XsMessage message) {
    if (SwigDerivedClassHasMethod("onNonDataMessage", swigMethodTypes10)) xsensdeviceapiPINVOKE.XsCallback_onNonDataMessageSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message)); else xsensdeviceapiPINVOKE.XsCallback_onNonDataMessage(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message));
  }

  protected virtual void onMessageReceivedFromDevice(SWIGTYPE_p_XsDevice dev, XsMessage message) {
    if (SwigDerivedClassHasMethod("onMessageReceivedFromDevice", swigMethodTypes11)) xsensdeviceapiPINVOKE.XsCallback_onMessageReceivedFromDeviceSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message)); else xsensdeviceapiPINVOKE.XsCallback_onMessageReceivedFromDevice(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message));
  }

  protected virtual void onMessageSentToDevice(SWIGTYPE_p_XsDevice dev, XsMessage message) {
    if (SwigDerivedClassHasMethod("onMessageSentToDevice", swigMethodTypes12)) xsensdeviceapiPINVOKE.XsCallback_onMessageSentToDeviceSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message)); else xsensdeviceapiPINVOKE.XsCallback_onMessageSentToDevice(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message));
  }

  protected virtual void onAllLiveDataAvailable(XsDevicePtrArray devs, SWIGTYPE_p_p_XsDataPacket packets) {
    if (SwigDerivedClassHasMethod("onAllLiveDataAvailable", swigMethodTypes13)) xsensdeviceapiPINVOKE.XsCallback_onAllLiveDataAvailableSwigExplicitXsCallback(swigCPtr, XsDevicePtrArray.getCPtr(devs), SWIGTYPE_p_p_XsDataPacket.getCPtr(packets)); else xsensdeviceapiPINVOKE.XsCallback_onAllLiveDataAvailable(swigCPtr, XsDevicePtrArray.getCPtr(devs), SWIGTYPE_p_p_XsDataPacket.getCPtr(packets));
  }

  protected virtual void onAllRecordingDataAvailable(XsDevicePtrArray devs, SWIGTYPE_p_p_XsDataPacket packets) {
    if (SwigDerivedClassHasMethod("onAllRecordingDataAvailable", swigMethodTypes14)) xsensdeviceapiPINVOKE.XsCallback_onAllRecordingDataAvailableSwigExplicitXsCallback(swigCPtr, XsDevicePtrArray.getCPtr(devs), SWIGTYPE_p_p_XsDataPacket.getCPtr(packets)); else xsensdeviceapiPINVOKE.XsCallback_onAllRecordingDataAvailable(swigCPtr, XsDevicePtrArray.getCPtr(devs), SWIGTYPE_p_p_XsDataPacket.getCPtr(packets));
  }

  protected virtual void onDataUnavailable(SWIGTYPE_p_XsDevice dev, long packetId) {
    if (SwigDerivedClassHasMethod("onDataUnavailable", swigMethodTypes15)) xsensdeviceapiPINVOKE.XsCallback_onDataUnavailableSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), packetId); else xsensdeviceapiPINVOKE.XsCallback_onDataUnavailable(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), packetId);
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("onDeviceStateChanged", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateXsCallback_0(SwigDirectoronDeviceStateChanged);
    if (SwigDerivedClassHasMethod("onLiveDataAvailable", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateXsCallback_1(SwigDirectoronLiveDataAvailable);
    if (SwigDerivedClassHasMethod("onMissedPackets", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateXsCallback_2(SwigDirectoronMissedPackets);
    if (SwigDerivedClassHasMethod("onWakeupReceived", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateXsCallback_3(SwigDirectoronWakeupReceived);
    if (SwigDerivedClassHasMethod("onProgressUpdated", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateXsCallback_4(SwigDirectoronProgressUpdated);
    if (SwigDerivedClassHasMethod("onWriteMessageToLogFile", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateXsCallback_5(SwigDirectoronWriteMessageToLogFile);
    if (SwigDerivedClassHasMethod("onRecordingDataAvailable", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateXsCallback_6(SwigDirectoronRecordingDataAvailable);
    if (SwigDerivedClassHasMethod("onConnectivityChanged", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateXsCallback_7(SwigDirectoronConnectivityChanged);
    if (SwigDerivedClassHasMethod("onInfoResponse", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateXsCallback_8(SwigDirectoronInfoResponse);
    if (SwigDerivedClassHasMethod("onError", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateXsCallback_9(SwigDirectoronError);
    if (SwigDerivedClassHasMethod("onNonDataMessage", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateXsCallback_10(SwigDirectoronNonDataMessage);
    if (SwigDerivedClassHasMethod("onMessageReceivedFromDevice", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateXsCallback_11(SwigDirectoronMessageReceivedFromDevice);
    if (SwigDerivedClassHasMethod("onMessageSentToDevice", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateXsCallback_12(SwigDirectoronMessageSentToDevice);
    if (SwigDerivedClassHasMethod("onAllLiveDataAvailable", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateXsCallback_13(SwigDirectoronAllLiveDataAvailable);
    if (SwigDerivedClassHasMethod("onAllRecordingDataAvailable", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateXsCallback_14(SwigDirectoronAllRecordingDataAvailable);
    if (SwigDerivedClassHasMethod("onDataUnavailable", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateXsCallback_15(SwigDirectoronDataUnavailable);
    xsensdeviceapiPINVOKE.XsCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(XsCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectoronDeviceStateChanged(global::System.IntPtr dev, int newState, int oldState) {
    onDeviceStateChanged((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (XsDeviceState)newState, (XsDeviceState)oldState);
  }

  private void SwigDirectoronLiveDataAvailable(global::System.IntPtr dev, global::System.IntPtr packet) {
    onLiveDataAvailable((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (packet == global::System.IntPtr.Zero) ? null : new XsDataPacket(packet, false));
  }

  private void SwigDirectoronMissedPackets(global::System.IntPtr dev, int count, int first, int last) {
    onMissedPackets((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), count, first, last);
  }

  private void SwigDirectoronWakeupReceived(global::System.IntPtr dev) {
    onWakeupReceived((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false));
  }

  private void SwigDirectoronProgressUpdated(global::System.IntPtr dev, int current, int total, global::System.IntPtr identifier) {
    onProgressUpdated((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), current, total, (identifier == global::System.IntPtr.Zero) ? null : new XsString(identifier, false));
  }

  private int SwigDirectoronWriteMessageToLogFile(global::System.IntPtr dev, global::System.IntPtr message) {
    return onWriteMessageToLogFile((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (message == global::System.IntPtr.Zero) ? null : new XsMessage(message, false));
  }

  private void SwigDirectoronRecordingDataAvailable(global::System.IntPtr dev, global::System.IntPtr data) {
    onRecordingDataAvailable((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (data == global::System.IntPtr.Zero) ? null : new XsDataPacket(data, false));
  }

  private void SwigDirectoronConnectivityChanged(global::System.IntPtr dev, int newState) {
    onConnectivityChanged((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (XsConnectivityState)newState);
  }

  private void SwigDirectoronInfoResponse(global::System.IntPtr dev, int request) {
    onInfoResponse((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (XsInfoRequest)request);
  }

  private void SwigDirectoronError(global::System.IntPtr dev, int error) {
    onError((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (XsResultValue)error);
  }

  private void SwigDirectoronNonDataMessage(global::System.IntPtr dev, global::System.IntPtr message) {
    onNonDataMessage((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (message == global::System.IntPtr.Zero) ? null : new XsMessage(message, false));
  }

  private void SwigDirectoronMessageReceivedFromDevice(global::System.IntPtr dev, global::System.IntPtr message) {
    onMessageReceivedFromDevice((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (message == global::System.IntPtr.Zero) ? null : new XsMessage(message, false));
  }

  private void SwigDirectoronMessageSentToDevice(global::System.IntPtr dev, global::System.IntPtr message) {
    onMessageSentToDevice((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (message == global::System.IntPtr.Zero) ? null : new XsMessage(message, false));
  }

  private void SwigDirectoronAllLiveDataAvailable(global::System.IntPtr devs, global::System.IntPtr packets) {
    onAllLiveDataAvailable((devs == global::System.IntPtr.Zero) ? null : new XsDevicePtrArray(devs, false), (packets == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_XsDataPacket(packets, false));
  }

  private void SwigDirectoronAllRecordingDataAvailable(global::System.IntPtr devs, global::System.IntPtr packets) {
    onAllRecordingDataAvailable((devs == global::System.IntPtr.Zero) ? null : new XsDevicePtrArray(devs, false), (packets == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_XsDataPacket(packets, false));
  }

  private void SwigDirectoronDataUnavailable(global::System.IntPtr dev, long packetId) {
    onDataUnavailable((dev == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), packetId);
  }

  public delegate void SwigDelegateXsCallback_0(global::System.IntPtr dev, int newState, int oldState);
  public delegate void SwigDelegateXsCallback_1(global::System.IntPtr dev, global::System.IntPtr packet);
  public delegate void SwigDelegateXsCallback_2(global::System.IntPtr dev, int count, int first, int last);
  public delegate void SwigDelegateXsCallback_3(global::System.IntPtr dev);
  public delegate void SwigDelegateXsCallback_4(global::System.IntPtr dev, int current, int total, global::System.IntPtr identifier);
  public delegate int SwigDelegateXsCallback_5(global::System.IntPtr dev, global::System.IntPtr message);
  public delegate void SwigDelegateXsCallback_6(global::System.IntPtr dev, global::System.IntPtr data);
  public delegate void SwigDelegateXsCallback_7(global::System.IntPtr dev, int newState);
  public delegate void SwigDelegateXsCallback_8(global::System.IntPtr dev, int request);
  public delegate void SwigDelegateXsCallback_9(global::System.IntPtr dev, int error);
  public delegate void SwigDelegateXsCallback_10(global::System.IntPtr dev, global::System.IntPtr message);
  public delegate void SwigDelegateXsCallback_11(global::System.IntPtr dev, global::System.IntPtr message);
  public delegate void SwigDelegateXsCallback_12(global::System.IntPtr dev, global::System.IntPtr message);
  public delegate void SwigDelegateXsCallback_13(global::System.IntPtr devs, global::System.IntPtr packets);
  public delegate void SwigDelegateXsCallback_14(global::System.IntPtr devs, global::System.IntPtr packets);
  public delegate void SwigDelegateXsCallback_15(global::System.IntPtr dev, long packetId);

  private SwigDelegateXsCallback_0 swigDelegate0;
  private SwigDelegateXsCallback_1 swigDelegate1;
  private SwigDelegateXsCallback_2 swigDelegate2;
  private SwigDelegateXsCallback_3 swigDelegate3;
  private SwigDelegateXsCallback_4 swigDelegate4;
  private SwigDelegateXsCallback_5 swigDelegate5;
  private SwigDelegateXsCallback_6 swigDelegate6;
  private SwigDelegateXsCallback_7 swigDelegate7;
  private SwigDelegateXsCallback_8 swigDelegate8;
  private SwigDelegateXsCallback_9 swigDelegate9;
  private SwigDelegateXsCallback_10 swigDelegate10;
  private SwigDelegateXsCallback_11 swigDelegate11;
  private SwigDelegateXsCallback_12 swigDelegate12;
  private SwigDelegateXsCallback_13 swigDelegate13;
  private SwigDelegateXsCallback_14 swigDelegate14;
  private SwigDelegateXsCallback_15 swigDelegate15;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsDeviceState), typeof(XsDeviceState) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsDataPacket) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(int), typeof(int), typeof(int) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(int), typeof(int), typeof(XsString) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsMessage) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsDataPacket) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsConnectivityState) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsInfoRequest) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsResultValue) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsMessage) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsMessage) };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsMessage) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(XsDevicePtrArray), typeof(SWIGTYPE_p_p_XsDataPacket) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] { typeof(XsDevicePtrArray), typeof(SWIGTYPE_p_p_XsDataPacket) };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(long) };
}

}
