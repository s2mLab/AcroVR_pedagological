//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsEuler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsEuler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsEuler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsEuler() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsEuler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public XsEuler() : this(xsensdeviceapiPINVOKE.new_XsEuler__SWIG_0(), true) {
  }

  public XsEuler(double x_, double y_, double z_) : this(xsensdeviceapiPINVOKE.new_XsEuler__SWIG_1(x_, y_, z_), true) {
  }

  public XsEuler(XsEuler other) : this(xsensdeviceapiPINVOKE.new_XsEuler__SWIG_2(XsEuler.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsEuler(XsQuaternion q) : this(xsensdeviceapiPINVOKE.new_XsEuler__SWIG_3(XsQuaternion.getCPtr(q)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsEuler_empty(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_double data() {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsEuler_data(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public XsEuler fromQuaternion(XsQuaternion quat) {
    XsEuler ret = new XsEuler(xsensdeviceapiPINVOKE.XsEuler_fromQuaternion(swigCPtr, XsQuaternion.getCPtr(quat)), false);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double roll() {
    double ret = xsensdeviceapiPINVOKE.XsEuler_roll(swigCPtr);
    return ret;
  }

  public double pitch() {
    double ret = xsensdeviceapiPINVOKE.XsEuler_pitch(swigCPtr);
    return ret;
  }

  public double yaw() {
    double ret = xsensdeviceapiPINVOKE.XsEuler_yaw(swigCPtr);
    return ret;
  }

  public double x() {
    double ret = xsensdeviceapiPINVOKE.XsEuler_x(swigCPtr);
    return ret;
  }

  public double y() {
    double ret = xsensdeviceapiPINVOKE.XsEuler_y(swigCPtr);
    return ret;
  }

  public double z() {
    double ret = xsensdeviceapiPINVOKE.XsEuler_z(swigCPtr);
    return ret;
  }

  public bool compare(XsEuler other, double tolerance) {
    bool ret = xsensdeviceapiPINVOKE.XsEuler_compare(swigCPtr, XsEuler.getCPtr(other), tolerance);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
