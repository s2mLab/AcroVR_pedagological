//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_void m_data {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsArray_m_data_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public uint m_size {
    get {
      uint ret = xsensdeviceapiPINVOKE.XsArray_m_size_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_reserved {
    get {
      uint ret = xsensdeviceapiPINVOKE.XsArray_m_reserved_get(swigCPtr);
      return ret;
    } 
  }

  public int m_flags {
    get {
      int ret = xsensdeviceapiPINVOKE.XsArray_m_flags_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_XsArrayDescriptor m_descriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsArray_m_descriptor_get(swigCPtr);
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public XsArray(SWIGTYPE_p_XsArrayDescriptor descriptor, uint count, SWIGTYPE_p_void src) : this(xsensdeviceapiPINVOKE.new_XsArray__SWIG_0(SWIGTYPE_p_XsArrayDescriptor.getCPtr(descriptor), count, SWIGTYPE_p_void.getCPtr(src)), true) {
  }

  public XsArray(XsArray src) : this(xsensdeviceapiPINVOKE.new_XsArray__SWIG_1(XsArray.getCPtr(src)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsArray(SWIGTYPE_p_XsArrayDescriptor descriptor, SWIGTYPE_p_void arg1, uint count, XsDataFlags flags) : this(xsensdeviceapiPINVOKE.new_XsArray__SWIG_2(SWIGTYPE_p_XsArrayDescriptor.getCPtr(descriptor), SWIGTYPE_p_void.getCPtr(arg1), count, (int)flags), true) {
  }

}

}
