//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsVersion : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsVersion(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsVersion obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsVersion() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsVersion(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public XsVersion(int maj, int min, int rev, int build, XsString extra) : this(xsensdeviceapiPINVOKE.new_XsVersion__SWIG_0(maj, min, rev, build, XsString.getCPtr(extra)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVersion(int maj, int min, int rev, int build, int reposVersion, XsString extra) : this(xsensdeviceapiPINVOKE.new_XsVersion__SWIG_1(maj, min, rev, build, reposVersion, XsString.getCPtr(extra)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVersion(int maj, int min, int rev, int build, int reposVersion) : this(xsensdeviceapiPINVOKE.new_XsVersion__SWIG_2(maj, min, rev, build, reposVersion), true) {
  }

  public XsVersion(int maj, int min, int rev, int build) : this(xsensdeviceapiPINVOKE.new_XsVersion__SWIG_3(maj, min, rev, build), true) {
  }

  public XsVersion(int maj, int min, int rev) : this(xsensdeviceapiPINVOKE.new_XsVersion__SWIG_4(maj, min, rev), true) {
  }

  public XsVersion(int maj, int min) : this(xsensdeviceapiPINVOKE.new_XsVersion__SWIG_5(maj, min), true) {
  }

  public XsVersion(int maj) : this(xsensdeviceapiPINVOKE.new_XsVersion__SWIG_6(maj), true) {
  }

  public XsVersion() : this(xsensdeviceapiPINVOKE.new_XsVersion__SWIG_7(), true) {
  }

  public XsVersion(SWIGTYPE_p_XsVersion other) : this(xsensdeviceapiPINVOKE.new_XsVersion__SWIG_8(SWIGTYPE_p_XsVersion.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isEqual(SWIGTYPE_p_XsVersion other) {
    bool ret = xsensdeviceapiPINVOKE.XsVersion_isEqual(swigCPtr, SWIGTYPE_p_XsVersion.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsVersion_empty(swigCPtr);
    return ret;
  }

  public XsString toXsString() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsVersion_toXsString(swigCPtr), true);
    return ret;
  }

  public int major() {
    int ret = xsensdeviceapiPINVOKE.XsVersion_major(swigCPtr);
    return ret;
  }

  public int minor() {
    int ret = xsensdeviceapiPINVOKE.XsVersion_minor(swigCPtr);
    return ret;
  }

  public int revision() {
    int ret = xsensdeviceapiPINVOKE.XsVersion_revision(swigCPtr);
    return ret;
  }

  public int build() {
    int ret = xsensdeviceapiPINVOKE.XsVersion_build(swigCPtr);
    return ret;
  }

  public int reposVersion() {
    int ret = xsensdeviceapiPINVOKE.XsVersion_reposVersion(swigCPtr);
    return ret;
  }

  public XsString extra() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsVersion_extra(swigCPtr), false);
    return ret;
  }

  public void setMajor(int major) {
    xsensdeviceapiPINVOKE.XsVersion_setMajor(swigCPtr, major);
  }

  public void setMinor(int minor) {
    xsensdeviceapiPINVOKE.XsVersion_setMinor(swigCPtr, minor);
  }

  public void setRevision(int revision) {
    xsensdeviceapiPINVOKE.XsVersion_setRevision(swigCPtr, revision);
  }

  public void setBuild(int build) {
    xsensdeviceapiPINVOKE.XsVersion_setBuild(swigCPtr, build);
  }

  public void setReposVersion(int reposVersion) {
    xsensdeviceapiPINVOKE.XsVersion_setReposVersion(swigCPtr, reposVersion);
  }

  public void setExtra(XsString extra) {
    xsensdeviceapiPINVOKE.XsVersion_setExtra(swigCPtr, XsString.getCPtr(extra));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
